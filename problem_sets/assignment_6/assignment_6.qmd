---
title: "NTRES 6100: Assignment #6"
author: "Lok Mani Sapkota"
format: gfm
editor: visual
execute: 
  output: true
  warning: false
---

## Loading all the required packages

```{r}
library(tidyverse)
library(knitr)
library(lubridate)
```

## **Exercise 1. Tibble and Data Import**

Import the data frames listed below into R and [parse](https://r4ds.had.co.nz/data-import.html#parsing-a-vector) the columns appropriately when needed. Watch out for the formatting oddities of each dataset. Print the results directly, **without** using `kable()`.

**You only need to finish any three out of the five questions in this exercise in order to get credit.**

#### **1.1 Create the following tibble manually, first using `tribble()` and then using `tibble()`. Print both results. \[We didn’t have time to cover this in class, but look up how these functions work [here](https://r4ds.had.co.nz/tibbles.html#creating-tibbles)\]**

`tribble()`:

```{r}
tribble(
  ~a, ~b, ~c,
  1, 2.1, "apple",
  2, 3.2, "orange"
  )
```

`tibble()`:

```{r}
tibble(
  a = c(1, 2),
  b = c(2.1, 3.2),
  c = c("apple", "orange")
)
```

#### **1.2 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt` into R. Change the column names into “Name”, “Weight”, “Price”.**

```{r}
df2 <- read.table(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt",
  sep = ",",
  col.names = c("Name", "Weight", "Price"),
  header = FALSE
)

df2$Weight <-  as.double(df2$Weight)

df2
```

#### **1.3 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt` into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.**

```{r}
df3 <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt", 
                  delim = ";",
                  skip = 2,
                  quote = "/",
                  na = c("?", "Not Available"), 
                  trim_ws = TRUE
                )
df3
```

#### **1.4 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt` into R. Watch out for comments, units, and decimal marks (which are `,` in this case).**

```{r}
df4 <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt", comment = "/")
df4 <- df4 |>
  mutate(
    Weight = parse_number(Weight),
    Price = Price |>
      str_replace_all(",", ".") |>
      str_remove_all("€") |>
      as.numeric()
  )
df4
```

## **Exercise 2. Weather station**

This dataset contains the weather and air quality data collected by a weather station in Taiwan. It was obtained from the Environmental Protection Administration, Executive Yuan, R.O.C. (Taiwan).

#### **2.1 Variable descriptions**

-   The text file `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt` contains descriptions of different variables collected by the station.

-   Import it into R and print it in a table as shown below with `kable()`.

```{r}
weather_notes <- read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt",
  delim = "-",
  col_names = TRUE,
  trim_ws = TRUE,
  locale = locale(encoding = "UTF-8")
)
kable(weather_notes)
```

`#` indicates invalid value by equipment inspection\
`*` indicates invalid value by program inspection\
`x` indicates invalid value by human inspection\
`NR` indicates no rainfall\
blank indicates no data

#### **2.2 Data tidying**

-   Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv` into R. As you can see, this dataset is a classic example of untidy data: values of a variable (i.e. hour of the day) are stored as column names; variable names are stored in the `item` column.

-   Clean this dataset up and restructure it into a tidy format.

-   Parse the `date` variable into date format and parse `hour` into time.

-   Turn all invalid values into `NA` and turn `NR` in rainfall into `0`.

-   Parse all values into numbers.

-   Show the first 6 rows and 10 columns of this cleaned dataset, as shown below, *without* using `kable()`.

Before cleaning:

```{r}
weather_data <- read.csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv",
             sep = ",",
             header = TRUE,
             check.names = FALSE)
head(weather_data,6)
```

After cleaning:

```{r}
weather_clean <- weather_data |> 
  pivot_longer(
    cols = matches("^\\d{2}$"),        
    names_to  = "hour",
    values_to = "value"
  ) |> 
  mutate(
    date = str_replace_all(date, "/", "-") |> 
      as.Date(),
    hour = paste0(str_pad(hour, 2, pad = "0"), ":00"),
    value = case_when(
      value %in% c("#", "*", "X") ~ NA_character_,
      value == "NR" ~ "0",
      TRUE ~ value
    ),
    value = parse_number(value)
  ) |> 
  pivot_wider(
    names_from  = item,
    values_from = value
  ) |> 
  arrange(date, station, hour)

head(weather_clean,6)
```

#### **2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.**

```{r}
weather_clean  |> 
  filter(date == as.Date("2015-09-25"))  |> 
  mutate(hour = hm(hour))  |>                
  arrange(hour) |> 
  ggplot(aes(x = hour, y = AMB_TEMP)) +
  geom_line() +
  scale_x_time(
    breaks = hm(sprintf("%02d:00", seq(0, 24, by = 4))),   
    limits = c(hm("00:00"), hm("24:00")),
    labels = scales::time_format("%H:%M"))
```

#### **2.4 Plot the daily average ambient temperature throughout the year with a continuous line, as shown below.**

```{r}
weather_clean |> 
  group_by(date) |> 
  summarise(daily_average_ambient_temp = mean(AMB_TEMP)) |> 
   ggplot(aes(x = date, y = daily_average_ambient_temp)) +
  geom_line() 

```

#### **2.5 Plot the total rainfall per month in a bar chart, as shown below.**

Hint: separating date into three columns might be helpful.

```{r}
weather_clean |> 
  mutate(month = month(date)) |> 
  group_by(month) |> 
  summarize(MonthlyRainfall = sum(RAINFALL, na.rm = TRUE)) |> 
   ggplot(aes(x = factor(month), y = MonthlyRainfall)) +
  geom_col() +
  labs(
    x = "month",
    y = "MonthlyRainfall"
  )
```

#### **2.6 Plot the per hour variation in PM2.5 in the first week of September with a continuous line, as shown below.**

*Hint: uniting the date and hour and parsing the new variable might be helpful.*

```{r}
weather_clean |> 
  filter(between(date, as.Date("2015-09-01"), as.Date("2015-09-07"))) |> 
  mutate(
    datetime = ymd_hms(paste(date, paste0(hour, ":00")), tz = "UTC")
  ) |> 
  ggplot(aes(x = datetime, y = `PM2.5`)) +
  geom_line() +
  labs(
    x = "time",
    y = "PM2.5"
    )

```
